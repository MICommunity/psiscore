#summary Details for the implementation of a new score calculator
#labels Phase-Implementation

In the following you will find all the information required to implement your own scoring class with the help of the reference implementation. If you want more details on how to compile the server and how to deploy it, you might want to read [Creating_a_new_PSISCORE_server]. 

By using Java inheritance, we try to hide as much implementation details from you as possible. In essence, all you need to do in order to get a working calculator is to create a class that implements two methods, one that does the scoring, and one that describes what sort of scoring you offer. 

If you just want to develop a PSISCORE server class without knowing the stuff running in the background, read the *Quick start* below. If you are interested in more implementation details, you can dig deeper in *All the details*.

----

=Quick start=

===`getScores()`===
This method is the place where the scoring of individual interactions is performed. The input to the method is an `Interaction` object that contains references to all its participating interactors, their database identifiers, etc. If your method provides confidence scores that are precalculated, then you would only need to look up the scores in your database and add them as new `Confidence` objects to the `Interaction` like in the following:

{{{
Names names = new Names();
names.setShortLabel("your confidence");
Unit unit = new Unit();
unit.setNames(names);
Confidence confidence = new Confidence();
confidence.setUnit(unit);
confidence.setValue(value); // e.g. "1.0"

Collection<Confidence> confidences = interaction.getConfidences();
confidences.add(confidence);
}}}

The method will return the same interaction object it received as input, however, now with the added confidences.


===`getSupportedScoringMethods()===
This method tells PSISCORE clients and the PSISCORE registry, what scoring algorithms your server is providing. Users can use this list to only select certain scoring algorithms, if your server provides more than one.
A very simple, hard-coded, example for this method is listed below:

{{{
List<AlgorithmDescriptor> descriptorList = new ArrayList<AlgorithmDescriptor>();
AlgorithmDescriptor descriptor = new AlgorithmDescriptor();
descriptor.setId("example confidence"); // this has to be unique within the server
List<String> algorithmTypes = descriptor.getAlgorithmType();
algorithmTypes.add("predicted");
algorithmTypes.add("functional similarity");
descriptor.setRange("0-1");
descriptorList.add(descriptor);
return descriptorList;
}}}


----

=All the details=

This section contains information on the class structure of the PSISCORE server reference implementation. The information found here might be useful if you want to change the reference implementation, for instance, for using specific caching or threading techniques. 

==`ScoreCalculator`==
A `ScoreCalculator` is the abstract interface for all calculators, defining the basic methods every scoring calculator has to have. The PSISCORE reference implementation is based on Java threading, therefore, `ScoreCalculator` extends the `Thread` class. Each request will be handled by a `ScoreCalculator` thread and the outcome of this thread will be handled by listeners.  
The two important methods defined by the `ScoreCalculator` are `calculateScores` and `getSupportedScoringMethods`. The former takes an `EntrySet` (the object representation of the PSI-MI input data) and returns the same `EntrySet` plus the potential confidence scores calculated. The latter returns a list of `AlgorithmDescriptor`s, constructs that describe each scoring algorithms offered by a server. 
If you want to implement your own scoring class, you do not need to make any changes to the `ScoreCalculator`.

==`AbstractScoreCalculator`== 
The `AbstractScoreCalculator` extends the `ScoreCalculator` interface. The `AbstractScoreCalculator` implements the `run` method that every Java `Thread` has to provide. This method calls the `calculateScores` method that is responsible for scoring. `calculateScores` will iterate through all interactions in the user input data (i.e. the `EntrySet`) and send each interaction to the `getScores` method that does the actual calculation. 'getScores' is an abstract method, which means that it has to be defined by a class that inherits from the `AbstractScoreCalculator`. `AbstractScoreCalculator` also provides a basic listener interface that handles the outcome of a scoring thread. 
 
==`ExampleScoreCalculator`==
The reference implementation only provides two very simple scoring calculators to illustrate the general usage. Both exemplary calculators read confidence scores for certain binary interactions from flat text files. These calculators should only illustrate the general architecture of the reference implementation. In order to provide your own scoring method, you need to implement a new {{{ScoreCalculator}}}. This calculator could, depending on your scoring method and your general server settings, retrieve precalculated values form an in-house database or it could start external programs that calculate the scores on-the-fly.