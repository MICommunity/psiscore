#summary Details for the implementation of a new score calculator
#labels Phase-Implementation

In the following you will find all the information required to implement your own scoring class with the help of the reference implementation. If you want more details on how to compile the server and how to deploy it, you might want to read [Creating_a_new_PSISCORE_server this document]. 
By using Java inheritance, we try to hide as much implementation details from you as possible. In essence, all you need to do in order to get a working calculator is to create a class that implements the two methods. 
If you just want to quickly develop a PSISCORE server class without knowing the stuff runnign in the background, read the [PSISCORE_web_service_implementation_details#Quick_start]. If you want to dig deeper and might want to change other implementation aspects, you can have a look at [PSISCORE_web_service_implementation_details#All_the_details].

=Quick start=

Text on its way. [PSISCORE_web_service_implementation_details#test test]

=All the details=

=test=

==`ScoreCalculator`==
A `ScoreCalculator` is the abstract interface for all calculators, defining the basic methods every scoring calculator has to have. The PSISCORE reference implementation is based on Java threading, therefore, `ScoreCalculator` extends the `Thread` class. Each request will be handled by a `ScoreCalculator` thread and the outcome of this thread will be handled by listeners.  
The two important methods defined by the `ScoreCalculator` are `calculateScores` and `getSupportedScoringMethods`. The former takes an `EntrySet` (the object representation of the PSI-MI input data) and returns the same `EntrySet` plus the potential confidence scores calculated. The latter returns a list of `AlgorithmDescriptor`s, constructs that describe each scoring algorithms offered by a server. 
If you want to implement your own scoring class, you do not need to make any changes to the `ScoreCalculator`.

==`AbstractScoreCalculator`== 
The `AbstractScoreCalculator` extends the `ScoreCalculator` interface. The `AbstractScoreCalculator` implements the `run` method that every Java `Thread` has to provide. This method calls the `calculateScores` method that is responsible for scoring. `calculateScores` will iterate through all interactions in the user input data (i.e. the `EntrySet`) and send each interaction to the `getScores` method that does the actual calculation. 'getScores' is an abstract method, which means that it has to be defined by a class that inherits from the `AbstractScoreCalculator`. `AbstractScoreCalculator` also provides a basic listener interface that handles the outcome of a scoring thread. 
 
==`ExampleScoreCalculator`==
The reference implementation only provides two very simple scoring calculators to illustrate the general usage. Both exemplary calculators read confidence scores for certain binary interactions from flat text files. These calculators should only illustrate the general architecture of the reference implementation. In order to provide your own scoring method, you need to implement a new {{{ScoreCalculator}}}. This calculator could, depending on your scoring method and your general server settings, retrieve precalculated values form an in-house database or it could start external programs that calculate the scores on-the-fly.

===`getScores()`method===
Description on how to implement a new scoring routine here is currently being written. 